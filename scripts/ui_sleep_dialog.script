-- =======================================================================================
-- Modified by Tronex
-- Last modification: 2018/5/23
-- Prevent sleeping abuse of Ironman Life Granter feature
-- =======================================================================================

local sleep_control = nil
local wide = false
class "sleep_dialog" (CUIScriptWnd)

function sleep_dialog:__init() super()
	self:SetWndRect(Frect():set(0,0,1024,768))
	if(device().width/device().height>(1024/768+0.01)) then
		wide = true
	end
	
	self:SetAutoDelete(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_sleep_dialog.xml")

	self.back = xml:InitStatic("background", self)

	self.sleep_static = xml:InitStatic("sleep_static", self.back)
	self.sleep_static2 = xml:InitStatic("sleep_static", self.back)
	self.static_cover = xml:InitStatic("static_cover", self.back)
	self.st_marker = xml:InitStatic("st_marker", self.static_cover)

	self.sleep_st_tbl = {}
	for i = 1, 24 do
		self.sleep_st_tbl[i] = xml:InitStatic("sleep_st_"..i, self.back)
	end

	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, "time_track")

	self.btn_sleep = xml:Init3tButton("btn_sleep", self.back)
	self:Register(self.btn_sleep, "btn_sleep")

	self.btn_cancel = xml:Init3tButton("btn_cancel", self.back)
	self:Register(self.btn_cancel, "btn_cancel")

	self.sleep_mb = CUIMessageBoxEx()
	self.sleep_mb:SetAutoDelete(true)
	self:Register(self.sleep_mb, "sleep_mb")

	self:AddCallback("btn_sleep", ui_events.BUTTON_CLICKED, self.OnButtonSleep, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnButtonCancel, self)
	self:AddCallback("sleep_mb", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMessageBoxOk, self)
end

function sleep_dialog:Initialize()
	local cur_hours = level.get_time_hours()
	for i = 1, 24 do
		local hours = cur_hours + i
		if(hours>=24) then
			hours = hours - 24
		end
		self.sleep_st_tbl[i]:TextControl():SetText(hours..game.translate_string("st_sleep_hours"))
	end

	local delta = math.floor(591/24*cur_hours)
	local r = Frect():set(delta,413,591,531)
	self.sleep_static:SetTextureRect(r)
	local width = 591-delta
	if(wide) then
		width = width*0.8
	end
	self.sleep_static:SetWndSize(vector2():set(width, 118))

	r = Frect():set(0,413,delta,531)
	self.sleep_static2:SetTextureRect(r)
	local width = delta
	if(wide) then
		width = width*0.8
	end
	self.sleep_static2:SetWndSize(vector2():set(width, 118))

	local pos = self.sleep_static2:GetWndPos()
	pos.x = self.sleep_static:GetWndPos().x+self.sleep_static:GetWidth()
	self.sleep_static2:SetWndPos(pos)
end

function sleep_dialog:__finalize()
	sleep_control = nil
end

--' Приватная функция
--' Разрешаем спать только с 20 и с 9
local BOOL_actor_get_state_sleep
local function update_sleeping()        
local hours = level.get_time_hours()
	if hours >= 20 then 
		BOOL_actor_get_state_sleep = true
	elseif hours >= 9 then
		BOOL_actor_get_state_sleep = false
	end
end

function sleep_dialog:TestAndShow()
	if (self.ph_sleepbag_id and self.item_section) then
		local sim = alife()
		sim:create(self.item_section,db.actor:position(),0,0,0)
		local se_bag = sim:object(self.ph_sleepbag_id)
		if (se_bag) then
			sim:release(se_bag,true)
		end
		self.ph_sleepbag_id = nil
	end

	local bleeding = db.actor.bleeding > 0
	local radiation = db.actor.radiation > 0
	
	local sleep
	
	if not BOOL_MODE_MIXED then
		sleep = db.actor.sleep > 0.65								
	end
	
	-- Prevent sleep if bleeding and/or iradiated.
	if (bleeding or radiation) then
		if (bleeding and radiation) then
			SetHudMsg(game.translate_string("st_sleep_bleeding_irradiated"),5)
		elseif (bleeding) then
			SetHudMsg(game.translate_string("st_sleep_bleeding"),4)
		elseif (radiation) then
			SetHudMsg(game.translate_string("st_sleep_irradiated"),4)
		end
		return
	end
	
	if not BOOL_MODE_MIXED then
		if (axr_main.config:r_value("mm_options","enable_update_sleep",1,true) ~= false) then 
			if (sleep) then 
				if (sleep) then
					if BOOL_actor_get_state_sleep == false then
						SetHudMsg(game.translate_string("st_sleeping_irradiated"),4) 
						return end end else end else end			
	end		
	
	-- Prevent sleep if an emission or psi-storm currently ongoing.
	if (xr_conditions.surge_started() or psi_storm_manager.is_started()) then
		if not (surge_manager.actor_in_cover()) then
			SetHudMsg(game.translate_string("st_sleep_event"),4)
			return
		end
	end	

	self:Initialize()
	self:ShowDialog(true)
end

function sleep_dialog:Update()
	CUIScriptWnd.Update(self)
	if self:IsShown() then
		local sleep_time = self.time_track:GetIValue()-1
		local x = math.floor(591/24*sleep_time)
		if(x == 0) then
			x = 5
		end
		if(wide) then
			x = x*0.8
		end
		self.st_marker:SetWndPos(vector2():set(x, 0))
	end
end

function sleep_dialog:OnTrackButton() end

function sleep_dialog:OnButtonSleep()
	if self:IsShown() then self:HideDialog() end
	
	db.actor:give_info_portion("actor_is_sleeping")
	
	utils.save_var(db.actor,"heli_enemy_flag",nil)
	xr_effects.disable_ui(db.actor, nil)

	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")
	
	if self.forced then
		level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "ui_sleep_dialog.dream_callback")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback")
		
		amk_news_global.pr_local_two()
		
		if not BOOL_MODE_MIXED then
			level.set_rain_timer(0,0,0)
		end
		
		-- actor
		db.actor.psy_health = 1.0
		db.actor.sleep = 1.0
	end
	level.add_pp_effector("surge_fade.ppe", 11, false)
	
end

function sleep_dialog:OnButtonCancel()
	if (self:IsShown()) then
		self:HideDialog()
	end

	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
end

function sleep_dialog:OnMessageBoxOk()
	db.actor:give_info_portion("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
end

--------------------------------------------------------------------------------
function dream_callback()
	if not BOOL_MODE_MIXED then
		if (axr_main.config:r_value("mm_options","enable_gg_slleps",1,false) ~= true) then 
			return dream_callback1()
		else
			dream = nil
			get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
			get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
			_G.amb_vol = 0
			_G.mus_vol = 0
			random = math.random(1,11)
			
			if math.random(100) < 65 then
				if random == 1 then 
					dream="bloodshock_dream"
				elseif random == 2 then 
					dream="gshock_dream"
				elseif random == 3 then 
					dream="intro_dream2"
				elseif random == 4 then
					dream="death_machine_dream"
				elseif random == 5 then 
					dream="ARS_Dream1"
				elseif random == 6 then 
					dream="ARS_Dream2"
				elseif random == 7 then 
					dream="ARS_Dream3"
				elseif random == 8 then 
					dream="ARS_Dream4"
				elseif random == 9 then 
					dream="ARS_Dream5"
				elseif random == 10 then 
					dream="ARS_Dream6"
				elseif random == 11 then 
					dream="ARS_Dream7"	
				else 
					dream = nil
				end	
				if dream~=nil then
					game.start_tutorial(dream)
				end
			end
			if not dream then
				dream_callback1()
			end
		end
	else
		dream_callback1() 
	end
end

function dream_callback1()  

	level.add_cam_effector("camera_effects\\prison_1.anm", 888888, false, "ui_sleep_dialog.dream_callback2")
	level.add_pp_effector("yantar_underground_psi.ppe", 888889, false)
	level.add_pp_effector("total_recall.ppe", 888890, false)
	level.add_cam_effector("camera_effects\\hit_back_left.anm", 888891, false, "")

	SetSound([[characters_voice\human_01\stalker\states\breath\breath_2]])

	hours = sleep_control.forced or sleep_control.time_track:GetIValue()

	level.change_game_time(0,hours,0)
	ironman_manager.set_sleep_hrs(hours) -->> part added
	
	surge_manager.get_surge_manager().time_forwarded = true

	psi_storm_manager.get_psi_storm_manager().time_forwarded = true
		
	if(surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
		level.stop_weather_fx()
	end
	
	level_weathers.get_weather_manager():forced_weather_change()
	db.actor.power = 1
end

function dream_callback2()
	db.actor.sleep = 1			   
	xr_effects.enable_ui(db.actor, nil)
	if (_G.mus_vol > 0) then
		get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
		_G.mus_vol = 0 
	end
	
	if (_G.amb_vol > 0) then
		get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
		_G.amb_vol = 0
	end
	
	disable_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")

end

function sleep()
	if (sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = nil
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
end

function sleep_forced(hours)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = hours or math.random(3,9)
	sleep_control:OnButtonSleep()
end

function main()
	sleep()
end

function sleep_bag(ph_sleepbag_id,sec)
	if (sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = nil
	sleep_control.item_section = sec
	sleep_control.ph_sleepbag_id = ph_sleepbag_id
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
	return sleep_control
end

function on_game_start() RegisterScriptCallback("actor_on_update", update_sleeping) end