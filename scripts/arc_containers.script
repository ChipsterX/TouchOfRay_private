local cfg_containers = {}
local inv_containers = {}

local lost_cont_id = -1
local menu_showed = false
local cont_name

function get_cfg_containers_number()
	return table.getn(cfg_containers)
end

function get_inv_containers_number()
	return table.getn(inv_containers)
end

function get_cfg_index(cont_section)
	for i = 1, get_cfg_containers_number() do
		if arc.compare_part(cont_section,cfg_containers[i].section) then
			return i
		end
	end
	return 0
end

function get_inv_index(cont_id)
	for i = 1, get_inv_containers_number() do
		if inv_containers[i].id == cont_id then
			return i
		end
	end
	return 0
end

function get_inv_container_arts(cont_index)
	return inv_containers[cont_index].arts
end

function register_container(cont_id, cont_section, cont_arts)
	if get_inv_index(cont_id)>0 then -- Уже зарегистрирован
		return true
	end
	
	local f = get_cfg_index(cont_section)
	
	if f==0 then
		local ini = system_ini()
		
		if ini:section_exist(cont_section) then
			local tmp = {}
			
			tmp.section = cont_section
			if ini:line_exist(cont_section, "container_slots") then
				tmp.slots = ini:r_u32(cont_section, "container_slots")
			else
				return false
			end
			
			-- TODO: добавить настройки меню
			
			tmp.tx = ini:r_u32(cont_section, "inv_grid_x")
			tmp.ty = ini:r_u32(cont_section, "inv_grid_y")
			tmp.weight = ini:r_float(cont_section, "inv_weight")
			
			table.insert(cfg_containers, tmp)
			f = table.getn(cfg_containers)
      
			arc.info(list_cfg_containers(),1)
		else
			return false
		end
	end
	
	local cnt = {}
	
	cnt.id = cont_id
	cnt.type = f
	cnt.arts = {}
	
	local arts = cont_arts
	if not arts then
		arts = get_container_arts(cont_id)
	end
	local s = cfg_containers[f].slots
	
	for i = 1, s do
		if (not arts) or (not arts[i]) or (arts[i]=="_") then
			cnt.arts[i] = 0
		else
			local a = arc_arts.register_artefact(arts[i],1,true)
			if a==0 then
				arc.warning("Неизвестный артефакт "..tostring(arts[i]).." находится в слоте #"..i.." контейнера #"..cont_id..". При открытии контейнера артефакт будет удалён.")
			end
			cnt.arts[i] = a
		end
	end
	
	table.insert(inv_containers, cnt)
	arc.info(list_inv_containers(),1)
	
	if arts and (table.getn(arts)>s) then
		arc.warning("Количество артефактов превышает количество слотов в контейнере #"..cont_id..". При открытии контейнера лишние артефакты будут удалены.")
	end
	
	return true --f
end


function respawn_container(cont_index)
	local ic = inv_containers[cont_index]
	if not ic then
--		return false
	end
	local a = {}
	
	for i=1, cfg_containers[ic.type].slots do
		if ic.arts[i]>0 then
			a[i] = arc_arts.get_art_section(ic.arts[i])
		else
			a[i] = "_"
		end
	end
	
	local sobj = arc.give_item(cfg_containers[ic.type].section)
	if not sobj then
		return false
	else
		inv_containers[cont_index].id = sobj.id
		set_container_arts(sobj.id, a)
	end
end

function remove_container(cont_index)
	arc.remove_obj(inv_containers[cont_index].id)
end

--[[
function on_get_container(cont)
	register_container(cont:id(),cont:section())
end
--]]
function on_lose_container(cont_id)
	if not menu_showed then
		if lost_cont_id > 0 then
			arc.fault("Потеряно более одного контейнера!")
		end
		
		lost_cont_id = cont_id
		cont_name = alife():object(cont_id):name()
	end
end

function on_actor_update()
	if lost_cont_id > 0 then
		local n = get_inv_index(lost_cont_id)
		
		if alife():object(lost_cont_id)==nil then
			-- Контейнер использован. Показать меню
			arc_ui_container_menu.show_menu(get_inv_index(lost_cont_id))
			del_variable(cont_name)
		else
			-- Контейнер выброшен. Удалить контейнер и арты в нём из списка
			local arts = inv_containers[n].arts
			
			for i = 1, table.getn(arts) do
				if arts[i]>0 then
					arc_arts.register_artefact(arc_arts.get_art_section(arts[i]), -1, true)
				end
			end
			
			table.remove(inv_containers, n)
		end
		lost_cont_id = -1
	end
end

function set_menu_showed(f)
	menu_showed = f
end

function get_container_arts(cont_id)
	local sobj = alife():object(cont_id)
	if sobj==nil then
		return nil
	end
	
	local cd_string = load_variable(sobj:name())
	
	arc.info("CD = ["..tostring(cd_string).."]",1)
	
	if not cd_string or cd_string=="" then
		return nil
	end
	
	local arts = {}
	
	for a in string.gmatch(cd_string, "[_%w]+") do
		table.insert(arts, a)
	end
	
	return arts
end

function set_container_arts(cont_id, arts)
	local sobj = alife():object(cont_id)
	if sobj==nil then
		return false
	end
	local str = table.concat(arts, ',')
	arc.info("set_container_arts: CD = ["..tostring(str).."]",1)
	save_variable(sobj:name(), str)
	return true
end

function list_cfg_containers()
	local s = "cfg_containers = "
	
	for i=1, get_cfg_containers_number() do
		local c = cfg_containers[i]
--		s = s.."\n s=["..c.section.."], b_r="..c.belt_rad..", i_r="..c.inv_rad.."; tx=["..c.tx..","..c.ty.."], w="..c.weight
		s = s.."["..c.section.."] "
	end
	
	return s
end

function list_inv_containers()
	local s = "inv_containers = "
	
	for i=1, get_inv_containers_number() do
		local c = inv_containers[i]
--		s = s.."\n s=["..c.section.."], b_r="..c.belt_rad..", i_r="..c.inv_rad.."; tx=["..c.tx..","..c.ty.."], w="..c.weight
		s = s.."["..c.id.."] arts={"..table.concat(c.arts, ",").."}"
	end
	
	return s
end

-- сохраняем переменную
function save_variable(var, val)
	if var ~= nil and db.actor ~= nil then
		if val == nil then
			del_variable(var)
		else
			xr_pstors.pstor_store(db.actor, var, val)
		end
	end
end
-- грузим переменную
function load_variable(var, val)
	if var ~= nil and db.actor ~= nil then
		return xr_pstors.pstor_retrieve(db.actor, var, val)
	end
	return val
end
-- удаляем переменную
function del_variable(var)
	if var ~= nil and db.actor ~= nil then
		if db.storage[db.actor:id()].pstor and db.storage[db.actor:id()].pstor[var] then
			db.storage[db.actor:id()].pstor[var] = nil
		end
	end
end
--------------------------------------------------------------------------------------------------------
-- added by naxac
-- Удаление арта из контейнера
function remove_art(art_sect)
	for a = 0, db.actor:object_count()-1 do
		local cont = db.actor:object(a)
		if cont:section() == "arc_art_box_basic" then
			local str = arc_containers.load_variable(cont:name())
			if string.find(str, art_sect) then
				local n = get_inv_index(cont:id())
				local arts = inv_containers[n].arts
				for i = 1, table.getn(arts) do
					if arts[i]>0 and arc_arts.get_art_section(arts[i]) == art_sect then
						arc_arts.register_artefact(arc_arts.get_art_section(arts[i]), -1, true)
						inv_containers[n].arts[i] = 0
						break
					end
				end
				str = string.gsub(str, art_sect, "_")
				arc_containers.save_variable(cont:name(), str)
				break
			end
		end
	end
end
-- Проверка наличия арта в контейнере
function check_art_in_box(art_sect)
	for a = 0, db.actor:object_count()-1 do
		local cont = db.actor:object(a)
		if cont:section() == "arc_art_box_basic" then
			local str = arc_containers.load_variable(cont:name())
			if string.find(str, art_sect) then return true end
		end
	end
	return false
end