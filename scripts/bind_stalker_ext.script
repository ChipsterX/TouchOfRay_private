--[[
	bind_stalker_ext.script
	
	Extends the functionality of bind_stalker.script without filling it with clutter
	
	by: Alundaio
--]]


-------------------
-- actor_on_init
-------------------
function actor_on_init(binder)
	level_weathers.get_weather_manager()
	SendScriptCallback("actor_on_init",binder)
end 

ShowMessageTime = nil
function actor_on_reinit(binder)
	SendScriptCallback("actor_on_reinit",binder)
	local function check_hud_msg()
		-- Check HudMsg
		if (ShowMessageTime) then
			local hud = get_hud()
			if (hud) then
				local custom_static = hud:GetCustomStatic("not_enough_money_mine")
				if custom_static ~= nil and time_global() > ShowMessageTime then
					hud:RemoveCustomStatic("not_enough_money_mine")
					ShowMessageTime = nil
				end
			end
		end
		return false
	end
	AddUniqueCall(check_hud_msg)
	AddUniqueCall(ProcessEventQueue)
end
-------------------
-- actor_on_net_spawn
-------------------
function actor_on_net_spawn()
	local con = get_console()
	if (axr_main.config:r_value("mm_options","hardcore_ai_aim",1,false)) then
		con:execute("ai_aim_max_angle 20.0")
		con:execute("ai_aim_min_angle 17.0")
		con:execute("ai_aim_min_speed 2.00")
		con:execute("ai_aim_predict_time 0.28")
	else
		con:execute("ai_aim_max_angle 0.7854")
		con:execute("ai_aim_min_angle 0.19635")
		con:execute("ai_aim_min_speed 0.24")
		con:execute("ai_aim_predict_time 0.40")
	end
	
	-- some hacks
	local sim = alife()
	for id, se_obj in sim:objects() do
		-- hack to remove phantoms
		if (se_obj:clsid() == clsid.phantom) then
			--printf("release phantom hack!")
			sim:release(se_obj,true)
		end
	end
	
	SendScriptCallback("on_game_load",binder)
end

-------------------------------------
-- actor_on_net_destroy
-------------------------------------
function actor_on_net_destroy(binder)
	SendScriptCallback("actor_on_net_destroy",binder)
end 

-------------------
-- actor_on_update
-------------------
invulnerable_time = nil
function actor_on_first_update(binder,delta)
	local m_data = alife_storage_manager.get_state()
	-- check if artefacts can respawn for this level
	if (m_data.artefact_respawn_levels and m_data.artefact_respawn_levels[level.name()] == true) then 
		--printf("DEBUG: surge_manager respawn artefacts")
		surge_manager.get_surge_manager():respawn_artefacts_and_replace_anomaly_zone()
		m_data.artefact_respawn_levels[level.name()] = false
	end 
	invulnerable_time = invulnerable_time or time_global() + 7000
	SendScriptCallback("actor_on_first_update",binder,delta)
end

function actor_on_update(binder,delta)
	if not (db.actor:alive()) then
		return
	end
	
	-- WISH GRANTER ZOMBIED-IMMORTALITY
	if (db.actor:has_info("actor_made_wish_immortal") or invulnerable_time and invulnerable_time > time_global() + 7000) then 
		db.actor.health = 1
		db.actor.bleeding = 1
		db.actor.psy_health = 1
		db.actor.radiation = -1
	end
	SendScriptCallback("actor_on_update",binder,delta)
end

-------------------
-- actor_on_weapon_no_ammo(actor,wpn,elapsed)
-------------------
function actor_on_weapon_fired(binder,obj,wpn,ammo_elapsed,grenade_elapsed,ammo_type,grenade_type)
	SendScriptCallback("actor_on_weapon_fired",obj,wpn,ammo_elapsed,grenade_elapsed,ammo_type,grenade_type)
end

-------------------
-- actor_on_weapon_no_ammo(wpn)
-------------------
function actor_on_weapon_no_ammo(binder,wpn)
	SendScriptCallback("actor_on_weapon_no_ammo",wpn)
end

-------------------
-- actor_on_weapon_zoom_in(wpn)
-------------------
function actor_on_weapon_zoom_in(binder,obj,wpn)
	SendScriptCallback("actor_on_weapon_zoom_in",wpn)
end

-------------------
-- actor_on_weapon_zoom_out(wpn)
-------------------
function actor_on_weapon_zoom_out(binder,obj,wpn)
	SendScriptCallback("actor_on_weapon_zoom_out",wpn)
end

-------------------
-- actor_on_item_take(item)
-------------------
function actor_on_item_take(binder,item)
		
	if item:clsid() == clsid.wpn_binocular_s or 
		item:clsid() == clsid.wpn_knife_s or
		item:clsid() == clsid.wpn_bm16_s or 
		item:clsid() == clsid.wpn_groza_s or
		item:clsid() == clsid.wpn_svd_s or 
		item:clsid() == clsid.wpn_ak74_s or
		item:clsid() == clsid.wpn_lr300_s or 
		item:clsid() == clsid.wpn_hpsa_s or
		item:clsid() == clsid.wpn_pm_s or 
		item:clsid() == clsid.wpn_rg6_s or
		item:clsid() == clsid.wpn_rpg7_s or 
		item:clsid() == clsid.wpn_shotgun_s or
		item:clsid() == clsid.wpn_auto_shotgun_s or 
		item:clsid() == clsid.wpn_svu_s or
		item:clsid() == clsid.wpn_usp45_s or 
		item:clsid() == clsid.wpn_val_s or
		item:clsid() == clsid.wpn_vintorez_s or 
		item:clsid() == clsid.wpn_walther_s then		
		
		local sound_math_rand = math.random(1,4)	
	
		if sound_math_rand==1 then
			take_item([[device\sounds_on_take\rifle_holster_1]])

		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\rifle_holster_2]])

		elseif sound_math_rand==3 then
			take_item([[device\sounds_on_take\shotgun_holster_1]])

		elseif sound_math_rand==4 then
			take_item([[device\sounds_on_take\shotgun_holster_2]])
		end
	end
	
	if item:clsid() == clsid.obj_explosive_s then
		local sound_math_rand = math.random(1,2)
		
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\documents_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\documents_take_2]])	
		end
		
	end

	if item:clsid() == clsid.device_torch_s or
		item:clsid() == clsid.detector_scientific_s or	
		item:clsid() == clsid.detector_elite_s or
		item:clsid() == clsid.detector_advanced_s or
		item:clsid() == clsid.detector_simple_s or battery_s then
		
		local sound_math_rand = math.random(1,2)
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\pda_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\pda_take_2]])	
		end
	end

	if item:clsid() == clsid.wpn_scope_s or
		item:clsid() == clsid.wpn_silencer_s or
		item:clsid() == clsid.wpn_grenade_launcher_s then
		
		local sound_math_rand = math.random(1,2)	
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\rifle_holster_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\rifle_holster_2]])	
		end
	end
	
	if item:clsid() == clsid.equ_stalker_s or item:clsid() == clsid.equ_helmet_s then
		local sound_math_rand = math.random(1,2)	
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\outfit_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\outfit_take_2]])	
		end		
	end

	if item:clsid() == clsid.wpn_ammo_s or item:clsid() == clsid.wpn_ammo1_s then       
		local sound_math_rand = math.random(1,2)
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\ammo_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\ammo_take_2]])
		end			
	end

	if item:clsid() == clsid.wpn_ammo_vog25_s or
		item:clsid() == clsid.wpn_ammo_og7b_s or  
		item:clsid() == clsid.wpn_grenade_f1_s or  
		item:clsid() == clsid.wpn_grenade_rgd5_s or  	
		item:clsid() == clsid.wpn_ammo_m209_s then	
		local sound_math_rand = math.random(1,2)	
		
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\grenade_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\grenade_take_1]])	
		end			
	end
	
	if item:clsid() == clsid.artefact_s then
		local sound_math_rand = math.random(1,2)	
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\artefact_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\artefact_take_2]])	
		end			
	end

	if item:clsid() == clsid.obj_food_s then
		local sound_math_rand = math.random(1,2)		
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\food_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\food_take_2]])	
		end		
	end
	
	if item:clsid() == clsid.obj_pda_s then
		local sound_math_rand = math.random(1,2)		
		if sound_math_rand==1 then	
			take_item([[device\sounds_on_take\pda_take_1]])
		elseif sound_math_rand==2 then
			take_item([[device\sounds_on_take\pda_take_2]])	
		end		
	end
	
	if bool_artefacts_hit == true then
		bind_artefacts_hit.on_item_take(item)
	end

	arc_main.get_item(item)
	
	alife_spawn_manager.alife_delete_spawn()
	
	if not (db.actor) then 
		return -- don't remove, for some reason this callback is triggered before actor is fully loaded
	end
	
	SendScriptCallback("actor_on_item_take",item)
end

-------------------
-- actor_on_item_take_from_box
-------------------
function actor_on_item_take_from_box(binder,box,item)
	SendScriptCallback("actor_on_item_take_from_box",box,item)
end

-------------------
--
-------------------
function actor_on_item_drop(binder,item)
	arc_main.lose_item(item)
	SendScriptCallback("actor_on_item_drop",item)
end 

-------------------
-- actor_on_item_use(item)
-------------------
function actor_on_item_use(binder,item)
	local sec = item:section()
	if (sec == "drug_anabiotic") then 
		xr_effects.disable_ui_only(db.actor, nil)
		level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "bind_stalker_ext.anabiotic_callback")
		level.add_pp_effector("surge_fade.ppe", 11, false)
		give_info("anabiotic_in_process")
		local con = get_console()
		_G.mus_vol = con:get_float("snd_volume_music")
		_G.amb_vol = con:get_float("snd_volume_eff")
		con:execute("snd_volume_music 0")
		con:execute("snd_volume_eff 0")
	elseif (sec == "drug_psy_blockade" or sec == "drug_radioprotector" or sec == "drug_antidot") then
		local boost_time = system_ini():r_float_ex(sec,"boost_time")
		utils.save_var(db.actor,sec.."_expiration",utils.CTimeAddSec(game.get_game_time(),boost_time*level.get_time_factor()))
	elseif (sec == "radio_connections_pda") then 
		run_dynamic_element(pda_dialog.pda_dialog_box(),true)

	elseif (sec == "set_mutants_relaction_on") then 
	
		level.set_monster_relation( "boar", "actor",  0 )
		level.set_monster_relation( "bloodsucker", "actor",  0 )
		level.set_monster_relation( "flesh", "actor",  0 )
		level.set_monster_relation( "dog", "actor",  0 )
		level.set_monster_relation( "pseudodog", "actor",  0 )
		level.set_monster_relation( "cat", "actor",  0 )
		level.set_monster_relation( "chimera", "actor",  0 )
		level.set_monster_relation( "giant", "actor",  0 )
		level.set_monster_relation( "zombie", "actor",  0 )
		level.set_monster_relation( "burer", "actor",  0 )
		level.set_monster_relation( "controller", "actor",  0 )
		level.set_monster_relation( "poltergeist", "actor",  0 )
		level.set_monster_relation( "snork", "actor",  0 )
		level.set_monster_relation( "fracture", "actor",  0 )
		level.set_monster_relation( "rat", "actor",  0 )
		level.set_monster_relation( "tushkano", "actor",  0 )
		give_object_to_actor("set_mutants_relaction_off")	
	elseif (sec == "set_mutants_relaction_off") then 
	
		level.set_monster_relation( "boar", "actor",  -1 )
		level.set_monster_relation( "bloodsucker", "actor",  -1 )
		level.set_monster_relation( "flesh", "actor",  -1 )
		level.set_monster_relation( "dog", "actor",  -1 )
		level.set_monster_relation( "pseudodog", "actor",  -1 )
		level.set_monster_relation( "cat", "actor",  -1 )
		level.set_monster_relation( "chimera", "actor",  -1 )
		level.set_monster_relation( "giant", "actor",  -1 )
		level.set_monster_relation( "zombie", "actor",  -1 )
		level.set_monster_relation( "burer", "actor",  -1 )
		level.set_monster_relation( "controller", "actor",  -1 )
		level.set_monster_relation( "poltergeist", "actor",  -1 )
		level.set_monster_relation( "snork", "actor",  -1 )
		level.set_monster_relation( "fracture", "actor",  -1 )
		level.set_monster_relation( "rat", "actor",  -1 )
		level.set_monster_relation( "tushkano", "actor",  -1 )

		give_object_to_actor("set_mutants_relaction_on")		
	end 
	
	--/ SGM in
		sgm_callbacks.on_use_item(item)
	--/ SGM out
	
	SendScriptCallback("actor_on_item_use",item,sec)
end

-------------------
-- actor_on_trade(item)
-------------------
function actor_on_trade(binder,item,sell_bye,money)
	SendScriptCallback("actor_on_trade",item,sell_bye,money)
end

-------------------
-- actor_on_save(bind_stalker,packet)
-- IMPORTANT: Cannot be used as callback because this needs to be done in specific order, just call script directly!
-------------------
function actor_on_save(binder,packet)
	local sim,gg = alife(),game_graph()
	local actor_gv = sim and gg:vertex(sim:actor().m_game_vertex_id)
	
	if (actor_gv and actor_gv:level_id() ~= sim:level_id()) then
		--printf("DEBUG: actor changing level")
		SendScriptCallback("on_level_changing")
	end

	if (coc_treasure_manager) then
		coc_treasure_manager.save(packet)
	end
	
	surge_manager.actor_on_save(binder,packet)
	horror_manager.actor_on_save(binder,packet)
	psi_storm_manager.actor_on_save(binder,packet)
end

-------------------
-- actor_on_load(bind_stalker,packet)
-- IMPORTANT: Cannot be used as callback because this needs to be done in specific order, just call script directly!
-------------------
function actor_on_load(binder,packet)
	if (coc_treasure_manager) then
		coc_treasure_manager.load(packet)
	end
	surge_manager.actor_on_load(binder,packet)
	horror_manager.actor_on_load(binder,packet)
	psi_storm_manager.actor_on_load(binder,packet)
end

---------------------------------------------
-- on_key_press
---------------------------------------------
function on_key_press(binder,key)
	SendScriptCallback("on_key_press",key)
	
	--' /// ...
--	if key == DIK_keys.kQUICK_LOAD then 
--		operator:execute("load_last_save") 
--	end
	
	if key == DIK_keys.DIK_F5 then 
		bind_back_to_the_roots.quicksave_message() 
	end
	
	if key == DIK_keys.DIK_F11 then 
		if (axr_main.config:r_value("mm_options","enable_debug_hud",1,false) == true) then
			local text local vid local gvid local a = vector() 
			a = db.actor:position() vid = db.actor:level_vertex_id() gvid = db.actor:game_vertex_id() 
			log("State: key == DIK_keys.DIK_F11, uptade actor:position")
			printf("PositionX = %s PositionY = %s PositionZ = %s level_vertex = %s game_vertex_id = %s",a.x, a.y, a.z, vid, gvid)	
		else
			return NULL
		end
	end
end

---------------------------------------------
-- on_key_release
---------------------------------------------
function on_key_release(binder,key)
	SendScriptCallback("on_key_release",key)
end

---------------------------------------------
-- on_key_hold
---------------------------------------------
function on_key_hold(binder,key)
	SendScriptCallback("on_key_hold",key)
end

---------------------------------------------
-- on_actor_before_death
---------------------------------------------
function actor_on_before_death(binder,whoID)
	local flags = { ret_value = true }
	if (flags.ret_value == true) then
		db.actor:kill(db.actor,true)
	end
	SendScriptCallback("actor_on_before_death",whoID,flags)
end

---------------------------------------------
-- on_attach_vehicle
---------------------------------------------
function actor_on_attach_vehicle(binder,obj)
	SendScriptCallback("actor_on_attach_vehicle",obj)
end

---------------------------------------------
-- on_detach_vehicle
---------------------------------------------
function actor_on_detach_vehicle(binder,obj)
	SendScriptCallback("actor_on_detach_vehicle",obj)
	if (obj:section() == "deployable_mgun") then 
		local se_obj = alife_object(obj:id())
		if (se_obj) then 
			alife():release(se_obj)
		end
		alife():create("itm_deployable_mgun",vector():set(0,0,0),0,0,0)
	end
end

---------------------------------------------
-- 	on_use_vehicle
---------------------------------------------
function actor_on_use_vehicle(binder,obj)
	SendScriptCallback("actor_on_use_vehicle",obj)
end

---------------------------------------------
--	actor_on_task_callback
---------------------------------------------
function actor_on_task_callback(binder,_task, _state)
	if _state ~= task.fail then
		if _state == task.completed then
			news_manager.send_task(db.actor, "complete", _task)
		else
			news_manager.send_task(db.actor, "new", _task)
		end
	end
	task_manager.task_callback(_task, _state)
end

------------------------------------------
-- anabiotic_callback
------------------------------------------
function anabiotic_callback()
	level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "bind_stalker_ext.anabiotic_callback2")
	local rnd = math.random(35,45)
	local m = surge_manager.get_surge_manager()
	if(m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
		if(rnd>(m.surge_time-diff_sec)*tf/60) then
			m.time_forwarded = true
			m.ui_disabled = true
			m:end_surge()
		end
	end
	m = psi_storm_manager.get_psi_storm_manager()
	if(m and m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
			if(rnd>(m.psi_storm_duration-diff_sec)*tf/60) then
			m.time_forwarded = true
			--m.ui_disabled = true
			m:finish()
		end
	end

	level.change_game_time(0,0,rnd)
	level_weathers.get_weather_manager():forced_weather_change()
end

function anabiotic_callback2()
	xr_effects.enable_ui(db.actor, nil)
    get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	disable_info("anabiotic_in_process")
end

function actor_on_info_callback(binder,obj,info_id)
	SendScriptCallback("actor_on_info_callback",obj,info_id)
	--printf("info_id = %s",info_id)
end

function actor_item_to_belt(binder,obj)
	SendScriptCallback("actor_item_to_belt",obj)
end 

function actor_item_to_slot(binder,obj)
--	if (axr_main.config:r_value("mm_options","enable_outfit_portrait",1,false) == true) then
--		local outfit = db.actor:item_in_slot(7)
--		if (outfit and outfit:id() == obj:id()) then 
--			local icon = system_ini():r_string_ex(outfit:section(),"character_portrait")
--			if (icon) then
--				db.actor:set_character_icon(icon)
--			elseif (db.actor_binder.character_icon) then -- use default portrait if no outfit portrait exists
--				db.actor:set_character_icon(db.actor_binder.character_icon)
--			end
--		end
--	end

--	local outfit = db.actor:item_in_slot(12)
	
--	local outfit_local = db.actor:item_in_slot(12)
--	local outfit_condition = outfit_local:condition()
	
--	if outfit_local ~= or outfit_local then
--		if outfit_condition < 1.0 then	
--			CallLog()
--		end
--	end
--	if (outfit and outfit:id() == obj:id()) then 
		
--	end

	SendScriptCallback("actor_item_to_slot",obj)
end 

function actor_item_to_ruck(binder,obj)
--    if (axr_main.config:r_value("mm_options","enable_outfit_portrait",1,false) == true) and IsOutfit(obj) then
--        local outfit = db.actor:item_in_slot(7)
--        if (outfit == nil and db.actor_binder.character_icon) then
--            db.actor:set_character_icon(db.actor_binder.character_icon)
--        end
--    end
	SendScriptCallback("actor_item_to_ruck",obj)
end

function actor_on_weapon_jammed(binder,wpn)
	SendScriptCallback("actor_on_weapon_jammed",wpn)
end 

function actor_on_weapon_magazine_empty(binder,wpn,ammo_total)
	SendScriptCallback("actor_on_weapon_no_ammo",wpn,ammo_total)
end

function actor_on_weapon_reload(binder,wpn,ammo_total)
	SendScriptCallback("actor_on_weapon_reload",wpn,ammo_total)
end	

function actor_on_hud_animation_end(binder,item,section,motion,state,slot)
	--printf("hud_animation_end [%s] sec=%s motion=%s state=%s slot=%s",item and item:name(),section,motion,state,slot)
	SendScriptCallback("actor_on_hud_animation_end",item,section,motion,state,slot)
end

function actor_on_hit_callback(binder, obj, amount, local_direction, who, bone_index)

	if who and who:id()~=db.actor:id() and amount > 0 then
		if who and who:active_item() and IsStalker(who) then
	        if bone_index == 13 or bone_index == 14 or bone_index == 15 or bone_index == 16 or bone_index == 17 then
				log("actor_on_hit_callback:break_torch")
				local torch1 = db.actor:object("device_torch") 
				if (torch1 and torch1:torch_enabled()) then 
					torch1:set_torch_battery_status(0)
				end 
				local torch2 = db.actor:object("device_torch_plus") 
				if (torch2 and torch2:torch_enabled()) then 
					torch2:set_torch_battery_status(0)
				end 
				local torch3 = db.actor:object("device_torch_unik")
				if (torch3 and torch3:torch_enabled()) then 
					torch3:set_torch_battery_status(0)
				end 
			end
		end
	end
	
	SendScriptCallback("actor_on_hit_callback",obj, amount, local_direction, who, bone_index)
	
end

function actor_on_foot_step(binder,obj,power,b_play,b_on_ground,b_hud_view)
	SendScriptCallback("actor_on_foot_step",obj,power,b_play,b_on_ground,b_hud_view)
end

function take_item(sound,obj)
	if obj == nil then obj = db.actor end 
	snd = xr_sound.get_safe_sound_object(sound) 
	snd:play(db.actor, 0, sound_object.s2d)
end