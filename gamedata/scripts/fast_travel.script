------------------------------
-- Fast Travel system
-- author: Alundaio
-- Modified: sLoPpYdOtBiGhOlE (marker names, menu and config options, etc)
------------------------------
local enabled = 0
local combattravel = false
--local weighttravel = false
local damagetravel = false
local stormtravel = false
local longnames = false
local markermessage = false
local notime = false
local tsmarts = nil

quick_travel_smarts = nil

--local function bbp_extra_weight()
--	local w,ini = 0,system_ini()
--	if (string.find(_G.GAME_VERSION,"1.5")) then
--		local x,itm = db.actor:belt_count() or 0,nil
--		for i = 0, x - 1, 1 do
--			itm = db.actor:item_on_belt(i)
--			w = w + (itm and ((ini:r_float_ex(itm:section(),"additional_inventory_weight") or 0) * itm:condition()) or 0)
--		end
--		itm = db.actor:item_in_slot(13)
--		w = w + (itm and ini:r_float_ex(itm:section(),"additional_inventory_weight") or 0)
--	else
--		local function itr(npc,itm)
--			if (npc:is_on_belt(itm)) then
--				w = w + (itm and ((ini:r_float_ex(itm:section(),"additional_inventory_weight") or 0) * itm:condition()) or 0)
--			end
--		end
--		db.actor:iterate_inventory(itr,db.actor)
--	end
--	return w
--end

local function map_spot_menu_add_property(property_ui,id,level_name)
	local se_obj = alife_object(id)
	if not (se_obj) then
		return
	end
	if (DEV_DEBUG_DEV) or (enabled > 0 and se_obj:clsid() == clsid.smart_terrain and tsmarts[se_obj:name()]) then
		if (longnames) then
				property_ui:AddItem(game.translate_string("st_pda_fast_travel_to").." ".. game.translate_string(level_name).." "..game.translate_string(se_obj:name()))
		else
				property_ui:AddItem(game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(se_obj:name()))
		end
	end
end

local function map_spot_menu_property_clicked(property_ui,id,level_name,prop)
	local se_obj = alife_object(id)
	if not (se_obj) then
		return
	end

	if (longnames) then
		if (prop ~= (game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(level_name).." "..game.translate_string(se_obj:name()))) then
			return
		end
	else
		if (prop ~= (game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(se_obj:name()))) then
			return
		end
	end

	-- Prevent fast travel if in combat.
	if not (combattravel) then
		if not (is_empty(xr_combat_ignore.fighting_with_actor_npcs)) then
			get_hud():HidePdaMenu()
			SetHudMsg(game.translate_string("st_travel_event"),4)
			return
		end
	end

	-- Prevent fast travel while overloaded.
--	if not (weighttravel) then
--		local suit = db.actor:item_in_slot(7)
--		local diff = db.actor:get_total_weight() - db.actor:get_actor_max_walk_weight() - (suit and suit:get_additional_max_weight() or 0) - bbp_extra_weight()
--		if diff > 0 then
--			get_hud():HidePdaMenu()
--			SetHudMsg(game.translate_string("st_travel_overloaded"),4)
--			return
--		end
--	end

	-- Prevent fast travel if bleeding and/or iradiated.
	if not (damagetravel) then
		local bleeding = db.actor.bleeding > 0
		local radiation = db.actor.radiation > 0
		if (bleeding or radiation) then
			if (bleeding and radiation) then
				SetHudMsg(game.translate_string("st_sleep_bleeding_irradiated"),5)
			elseif (bleeding) then
				SetHudMsg(game.translate_string("st_sleep_bleeding"),4)
			elseif (radiation) then
				SetHudMsg(game.translate_string("st_sleep_irradiated"),4)
			end
			get_hud():HidePdaMenu()
			return
		end
	end

	-- Prevent fast travel if an emission or psi-storm currently ongoing.
	if not (stormtravel) then
		if (xr_conditions.surge_started() or psi_storm_manager.is_started()) then
			SetHudMsg(game.translate_string("st_travel_event"),4)
			get_hud():HidePdaMenu()
			return
		end
	end

	-- forward time when traveling
	if not (notime) then
		local dist = db.actor:position():distance_to(se_obj.position)
		level.change_game_time(0,math.floor(dist/1000)+math.random(0,2),math.random(1,59))
		surge_manager.get_surge_manager().time_forwarded = true
		psi_storm_manager.get_psi_storm_manager().time_forwarded = true
		level_weathers.get_weather_manager():forced_weather_change()
	end

	if (se_obj.online) then
		db.actor:set_actor_position(se_obj.position)
		get_hud():HidePdaMenu()
	else
		ChangeLevel(se_obj.position,se_obj.m_level_vertex_id,se_obj.m_game_vertex_id,vector():set(0,0,0))
	end
end

-- Used for Visit_Only mode, catches the player near the marker and updates things.
local function check_visit(id,level_name)
	if (enabled ~= 1) then
		return true
	end
	local se_obj = alife_object(id)
	if not (se_obj) then
		return true
	elseif not (se_obj.online) then
		return false
	elseif (db.actor:position():distance_to(se_obj.position) <= 45) then
		if not (xr_statistic.actor_statistic.smart_terrain_visited[se_obj:name()]) then
			xr_statistic.actor_statistic.smart_terrain_visited[se_obj:name()] = true
		end
		if (level.map_has_object_spot(id, "fast_travel") == 0) then
			if (longnames) then
				level.map_add_object_spot(id, "fast_travel", game.translate_string(level_name).." "..game.translate_string(se_obj:name()))
				if (markermessage) then
					SetHudMsg(game.translate_string(level_name).." "..game.translate_string(se_obj:name()).." Discovered", 4)
				end
			else
				level.map_add_object_spot(id, "fast_travel", game.translate_string(se_obj:name()))
				if (markermessage) then
					SetHudMsg(game.translate_string(se_obj:name()).." Discovered", 4)
				end
			end
		end
		return true
	end
	return false
end

local function on_game_load()
--	local stxt = axr_main.config:r_string_ex("mm_options","fast_travel")
--	if (stxt == game.translate_string("ui_mm_visited_only_travel")) then
--		enabled = 1
--	elseif (stxt == game.translate_string("ui_mm_show_all_travel")) or (stxt == nil) then
		enabled = 2
--	else
--		enabled = 0
--	end
	combattravel = axr_main.config:r_bool_ex("mm_options","enable_combat_travel",false)
--	weighttravel = axr_main.config:r_bool_ex("mm_options","enable_weight_travel",false)
	damagetravel = axr_main.config:r_bool_ex("mm_options","enable_damage_travel",false)
	stormtravel = axr_main.config:r_bool_ex("mm_options","enable_storm_travel",false)
	longnames = axr_main.config:r_bool_ex("mm_options","enable_long_names",false)
	markermessage = axr_main.config:r_bool_ex("mm_options","enable_visited_message",false)
	notime = axr_main.config:r_bool_ex("mm_options","enable_no_time_travel",false)

	local faction = character_community(db.actor):sub(7)
	local pini = ini_file("plugins\\faction_quick_travel.ltx")
	tsmarts = alun_utils.collect_section(pini,faction,true)

	if not (is_empty(tsmarts)) then
		local level_name
		local sim,gg = alife(),game_graph()
		for i=1,65534 do
			local smart = sim:object(i)
			if (smart and smart:clsid() == clsid.smart_terrain and tsmarts[smart:name()]) then
				if (level.map_has_object_spot(i, "fast_travel")) then
					level.map_remove_object_spot(i, "fast_travel")
				end
--				if (enabled == 1) then
--					if not (xr_statistic.actor_statistic.smart_terrain_visited[smart:name()]) then
--						level_name = sim:level_name(smart and gg:vertex(smart.m_game_vertex_id):level_id())
--						CreateTimeEvent(i,"check_visit",1,check_visit,i,level_name)
--					else
--						if (longnames) then
--							level_name = sim:level_name(smart and gg:vertex(smart.m_game_vertex_id):level_id())
--							level.map_add_object_spot(i, "fast_travel", game.translate_string(level_name).." "..game.translate_string(smart:name()))
--						else
--							level.map_add_object_spot(i, "fast_travel", game.translate_string(smart:name()))
--						end
--					end
--				elseif (enabled == 2) then
					if (enabled == 2) then
						if (longnames) then
							level_name = sim:level_name(smart and gg:vertex(smart.m_game_vertex_id):level_id())
							level.map_add_object_spot(i, "fast_travel", game.translate_string(level_name).." "..game.translate_string(smart:name()))
						else
							level.map_add_object_spot(i, "fast_travel", game.translate_string(smart:name()))
						end
					end
--				end
			end
		end
	end
	return true
end

local function opt_menu_on_accept()
	if (level.present() and db.actor) then
		RemoveTimeEvent("fast_travel_load","fast_travel_load")
		CreateTimeEvent("fast_travel_load","fast_travel_load",2,on_game_load)
	end
end

local function opt_menu_on_init(menu)
--	menu.gameplay_options["fast_travel"] = {default=game.translate_string("ui_mm_show_all_travel"), debug_only=false, typ="list", list={game.translate_string("ui_mm_disable_travel"),game.translate_string("ui_mm_visited_only_travel"),game.translate_string("ui_mm_show_all_travel")}}
	menu.gameplay_options["combat_travel"] = {default=false, debug_only=false, typ="check"}
--	menu.gameplay_options["weight_travel"] = {default=false, debug_only=false, typ="check"}
	menu.gameplay_options["damage_travel"] = {default=false, debug_only=false, typ="check"}
	menu.gameplay_options["storm_travel"] = {default=false, debug_only=false, typ="check"}
	menu.gameplay_options["long_names"]	= {default=false, debug_only=false, typ="check"}
	menu.gameplay_options["visited_message"] = {default=false, debug_only=false, typ="check"}
	menu.gameplay_options["no_time_travel"]	= {default=false, debug_only=false, typ="check"}
end

function on_game_start()
	RegisterScriptCallback("map_spot_menu_add_property",map_spot_menu_add_property)
	RegisterScriptCallback("map_spot_menu_property_clicked",map_spot_menu_property_clicked)
	RegisterScriptCallback("opt_menu_on_accept",opt_menu_on_accept)
	RegisterScriptCallback("opt_menu_on_init",opt_menu_on_init)
	RegisterScriptCallback("on_game_load",on_game_load)
end